=begin pod
=begin head2
Zef
=end head2

=begin para
Raku / Perl6 Module Management
=end para

=begin head1
Installation
=end head1

=begin head4
Manual
=end head4
=begin code
$ git clone https://github.com/ugexe/zef.git
$ cd zef
$ raku -I. bin/zef install .
=end code
=begin head4
Rakubrew
=end head4

=begin para
To install via rakubrew, please use the following command:
=end para
=begin code
$ rakubrew build-zef
=end code
=begin head1
USAGE
=end head1
=begin code
zef --help
zef --version

# install the CSV::Parser distribution
zef install CSV::Parser

# search for distribution names matching `CSV`
zef search CSV

# detailed information for a matching distribution
zef info CSV::Parser

# list all available distributions
zef list

# list reverse dependencies of an identity
zef rdepends HTTP::UserAgent

# test project in current directory
zef test .

# fetch a specific module only
zef fetch CSV::Parser

# fetch a module, then shell into its local path
zef look CSV::Parser

# smoke test modules from all repositories
zef smoke

# run Build.pm if one exists in given path
zef build .

# update Repository package lists
zef update

# upgrade all distributions (BETA)
zef upgrade

# upgrade specific distribution (BETA)
zef upgrade CSV::Parser

# lookup module info by name/path/sha1
zef --sha1 locate 9FA0AC28824EE9E5A9C0F99951CA870148AE378E

# launch browser to named support urls from meta data
zef browse zef bugtracker
=end code
=begin head2
More CLI
=end head2

=begin head4
B<install> \[\*@identities\]
=end head4

=begin para
Note: The install process does not install anything until all phases have completed. So, if the user requested to
`install A`, and A required module B: both would be downloaded, potentially built, tested, and installed -- but only
if both passed all their tests. For example: if module A failed its tests, then module B would not be installed
(even if it passed its own tests) unless forced.
=end para

=begin code :lang<math>
`@identities`\] can take the form of a file path (starting with **.** or **/**), URLs, paths, or identities:

    # IDENTITY
    zef install CSV::Parser
    zef install "CSV::Parser:auth<tony-o>:ver<0.1.2>"
    zef install "CSV::Parser:ver<0.1.2>"

    # PATH
    zef install ./Perl6-Net--HTTP

    # URL
    zef -v install git://github.com/ugexe/zef.git
    zef -v install https://github.com/ugexe/zef/archive/master.tar.gz
    zef -v install https://github.com/ugexe/zef.git@v0.1.22

A request may contain any number and combination of these. Paths and URLs will be resolved first so they are available
to fulfill any dependencies of other requested identities.

**Options**

    # Install to a custom locations
    --install-to=<id> # site/home/vendor/perl, or
    -to=<id>          # inst#/home/some/path/custom

    # Install all transitive and direct dependencies
    # even if they are already installed globally (BETA)
    --contained

    # Load a specific Zef config file
    --config-path=/some/path/config.json

    # Install only the dependency chains of the requested distributions
    --deps-only

    # Ignore errors occuring during the corresponding phase
    --force-resolve
    --force-fetch
    --force-extract
    --force-build
    --force-test
    --force-install

    # or set the default to all unset --force-* flags to True
    --force

    # Set the timeout for corresponding phases
    --fetch-timeout=600
    --extract-timeout=3600
    --build-timeout=3600
    --test-timeout=3600
    --install-timeout=3600

    # Number of simultaneous distributions/jobs to process for the corresponding phases
    --fetch-degree=5
    --test-degree=1

    # or set the default to all unset --*-timeout flags to 0
    --timeout=0

    # Do everything except the actual installations
    --dry

    # Build/Test/Install each dependency serially before proceeding to Build/Test/Install the next
    --serial

    # Disable testing
    --/test

    # Disable build phase
    --/build

    # Disable fetching dependencies
    --/depends
    --/build-depends
    --/test-depends

    # Force a refresh for all module index indexes
    --update

    # Force a refresh for a specific ecosystem module index
    --update=[ecosystem]

    # Skip refreshing all module index indexes
    --/update

    # Skip refreshing for a specific ecosystem module index
    --/update=[ecosystem]

**ENV Options**

    # Number of simultaneous distributions/jobs to process for the corresponding phases (see: --[phase]-degree options)
    ZEF_FETCH_DEGREE=5
    ZEF_TEST_DEGREE=1

    # Set the timeout for corresponding phases (see: --[phase]-timeout options)
    ZEF_FETCH_TIMEOUT=600
    ZEF_EXTRACT_TIMEOUT=3600
    ZEF_BUILD_TIMEOUT=3600
    ZEF_TEST_TIMEOUT=3600
    ZEF_INSTALL_TIMEOUT=3600

    # Path to config file (see: --config-path option)
    ZEF_CONFIG_PATH=$PWD/resources/config.json

#### **uninstall** 
=end code
=begin para
\*@identities\]
=end para

=begin para
Uninstall the specified distributions
=end para

=begin para
Note: Requires a bleeding edge rakudo (not available in 6.c)
=end para

=begin head4
B<update>
=end head4

=begin para
Update the package indexes for all C<Repository> backends
=end para

=begin para
Note: Some C<Repository> backends, like the default Ecosystems, have an C<auto-update> option
in C<resources/config.json> that can be enabled. This should be the number of hours until it should
auto update based on the file system last modified time of the ecosystem json file location.
=end para

=begin head4
B<upgrade> \[\*@identities\] I<BETA>
=end head4

=begin para
Upgrade specified identities. If no identities are provided, zef attempts to upgrade all installed distributions.
=end para

=begin head4
B<search> \[$identity\]
=end head4

=begin para
How these are handled depends on the C<Repository> engine used, which by default is C<Zef::Repository::Ecosystems>p6c<>
=end para
=begin code
$ zef -v search URI
===> Found 4 results
-------------------------------------------------------------------------
ID|From                              |Package             |Description
-------------------------------------------------------------------------
1 |Zef::Repository::LocalCache       |URI:ver<0.1.1>    |A URI impleme...
2 |Zef::Repository::Ecosystems<p6c>  |URI:ver<0.1.1>    |A URI impleme...
3 |Zef::Repository::Ecosystems<cpan> |URI:ver<0.1.1>    |A URI impleme...
4 |Zef::Repository::Ecosystems<cpan> |URI:ver<0.000.001>|A URI impleme...
-------------------------------------------------------------------------
=end code
=begin head4
B<info> \[$identity\]
=end head4

=begin para
View meta information of a distribution
=end para
=begin code
$ zef -v info HTTP::UserAgent
- Info for: HTTP::UserAgent
- Identity: HTTP::UserAgent:ver<1.1.16>:auth<github:sergot>
- Recommended By: Zef::Repository::LocalCache
Author:  github:sergot
Description:     Web user agent
Source-url:      git://github.com/sergot/http-useragent.git
Provides: 11 modules
#       HTTP::Cookie
#       HTTP::Header
#       HTTP::Cookies
#       HTTP::Message
#       HTTP::Request
#       HTTP::Response
#       HTTP::MediaType
#       HTTP::UserAgent
#       HTTP::Header::Field
#       HTTP::Request::Common
#       HTTP::UserAgent::Common
Depends: 7 items
---------------------------------
ID|Identity           |Installed?
---------------------------------
1 |HTTP::Status       |✓
2 |File::Temp         |✓
3 |DateTime::Parse    |✓
4 |Encode             |✓
5 |MIME::Base64       |✓
6 |URI                |✓
7 |IO::Capture::Simple|✓
---------------------------------
=end code
=para
B<Options>
=begin code
# Extra details (eg, list dependencies and which ones are installed)
-v
=end code
=begin head4
B<list> \[\*@from\]
=end head4

=begin para
List known available distributions
=end para
=begin code
$ zef --installed list
===> Found via /home/foo/.rakubrew/moar-master/install/share/perl6/site
CSV::Parser:ver<0.1.2>:auth<github:tony-o>
Zef:auth<github:ugexe>
===> Found via /home/foo/.rakubrew/moar-master/install/share/perl6
CORE:ver<6.c>:auth<perl>
=end code
=begin para
Note that not every Repository may provide such a list, and such lists may only
be a subset. For example: We may not be able to get a list of every distribution
on cpan, but we \*can\* get the $x most recent additions (we use 100 for now).
=end para

=begin code :lang<math>
`@from`\] allows you to show results from specific repositories only:

    zef --installed list perl   # Only list modules installed by rakudo itself

    zef list cpan               # Only show available modules from the repository
    zef list p6c                # with a name field matching the arguments to `list`
    zef list cached             # (be sure the repository is enabled in config)

Otherwise results from all enabled repositories will be returned.

**Options**

    # Only list installed distributions
    --installed

    # Additionally list the modules of discovered distributions
    -v

#### **depends** 
=end code
=begin para
$identity\]
=end para

=begin para
List direct and transitive dependencies to the first successful build graph for C<$identity>
=end para
=begin code
$ zef depends Cro::SSL
Cro::Core:ver<0.7>
IO::Socket::Async::SSL:ver<0.3>
OpenSSL:ver<0.1.14>:auth<github:sergot>
=end code
=begin head4
B<rdepends> \[$identity\]
=end head4

=begin para
List available distributions that directly depend on C<$identity>
=end para
=begin code
$ zef rdepends Net::HTTP
Minecraft-Tools:ver<0.1.0>
LendingClub:ver<0.1.0>
=end code
=begin head4
B<fetch> \[\*@identities\]
=end head4

=begin para
Fetches candidates for given identities
=end para

=begin head4
B<test> \[\*@paths\]
=end head4

=begin para
Run tests on each distribution located at \[`@paths`\]
=end para

=begin head4
B<build> \[\*@paths\]
=end head4

=begin para
Run the Build.pm file located in the given \[`@paths`\]
=end para

=begin para
If you want to create a build hook, put the following dependency-free boilerplate
in a file named C<Build.pm> at the root of your distribution:
=end para
=begin code
class Build {
    method build($dist-path) {
        # do build stuff to your module
        # which is located at $dist-path
    }
}
=end code
=begin para
Set the env variable B<ZEF\_BUILDPM\_DEBUG=1> or use the I<--debug> flag for additional debugging information.
=end para

=para
I<Note: In the future, a more appropriate hooking solution will replace this.>

=begin head4
B<look> \[$identity\]
=end head4

=begin para
Fetches the requested distribution and any dependencies (if requested), changes the directory to that of the fetched
distribution, and then stops program execution. This allows you modify or look at the source code before manually
continuing the install via `zef install .`
=end para

=begin para
Note that the path to any dependencies that needed to be fetched will be set in env at B<RAKULIB> , so you should
be able to run any build scripts, tests, or complete a manual install without having to specify their locations.
=end para

=begin head4
B<browse> $identity \[bugtracker | homepage | source\]
=end head4

=para
B<Options>
=begin code
# disables launching a browser window (just shows url)
--/open
=end code
=begin para
Output the url and launch a browser to open it.
=end para
=begin code
# also opens browser
$ zef browse Net::HTTP bugtracker
https://github.com/ugexe/Perl6-Net--HTTP/issues

# only outputs the url
$ zef browse Net::HTTP bugtracker --/open
https://github.com/ugexe/Perl6-Net--HTTP/issues
=end code
=begin head4
B<locate> \[$identity, C<name-path, > sha1-id\]
=end head4

=para
B<Options>
=begin code
# The argument is a sha1-id (otherwise assumed to be an identity or name-path)
--sha1
=end code
=begin para
Lookup a locally installed module by C<identity, > name-path, or $sha1-id
=end para
=begin code
$ zef --sha1 locate A9948E7371E0EB9AFDF1EEEB07B52A1B75537C31
===> From Distribution: zef:ver<*>:auth<github:ugexe>:api<>
lib/Zef/CLI.rakumod => ~/rakudo/install/share/perl6/site/sources/A9948E7371E0EB9AFDF1EEEB07B52A1B75537C31

$ zef locate Zef::CLI
===> From Distribution: zef:ver<*>:auth<github:ugexe>:api<>
lib/Zef/CLI.rakumod => ~/rakudo/install/share/perl6/site/sources/A9948E7371E0EB9AFDF1EEEB07B52A1B75537C31

$ zef locate lib/Zef/CLI.rakumod
===> From Distribution: zef:ver<*>:auth<github:ugexe>:api<>
Zef::CLI => ~/rakudo/install/share/perl6/site/sources/A9948E7371E0EB9AFDF1EEEB07B52A1B75537C31
=end code
=begin head4
B<nuke> \[RootDir | TempDir | StoreDir\]
=end head4

=begin para
Deletes all paths in the specific configuration directory
=end para

=begin head4
B<nuke> \[site | home\]
=end head4

=begin para
Deletes all paths that are rooted in the prefix of the matching CompUnit::Repository name
=end para
=begin code
# uninstall all modules
$ zef nuke site home
=end code
=begin head2
Output Verbosity
=end head2

=begin para
You can control the logging level using the following flags:
=end para
=begin code
# More/less detailed output
--error, --warn, --info (default), --verbose (-v), --debug
=end code
=begin head1
Global Configuration
=end head1

=begin head3
Finding the configuration file
=end head3

=begin para
You can always see the configuration file that will be used by running:
=end para
=begin code
$ zef --help
=end code
=begin para
In most cases the default configuration combined with command line options should be enough for most users.
=end para

=begin para
If you are most users (e.g. not: power users, packagers, zef plugin developers) you hopefully don't care about this section!
=end para

=begin head3
How the configuration file is chosen
=end head3

=begin para
The configuration file will be chosen at runtime from one of two (technically four) locations, and one can affect the others (this is not really a design decision and suggestions and PRs are welcome).
=end para

=begin para
First, and the most precise way, is to specify the config file by passing C<--config-path="..."> to any zef command.
=end para

=begin para
Second, third, and fourth we look at the path pointed to by C<%?RESOURCES<config.json>> . This will point to C<$zef-dir/resources/config.json> , where C<$zef-dir> will be either:
=end para

=item1 The prefix of a common configuration directory, such as C<$XDG_CONFIG_HOME> or C<$HOME/.config> .
=item1 The prefix of a rakudo installation location - This is the case if the modules loaded for bin/zef come from an installation CompUnit::Repository.
=item1 The current working directory C<$*CWD> - This is the case when modules loaded for bin/zef come from a non-installation CompUnit::Repository (such as `-I $dist-path`).
=begin code
To understand how this is chosen, consider:

    # Modules not loaded from an ::Installation,
    # so %?RESOURCES is $*CWD/resources
    $ raku -I. bin/zef --help
    ...
    CONFIGURATION /home/user/raku/zef/resources/config.json
    ...

    # Installed zef script loads modules from an ::Installation,
    # so %?RESOURCES is $raku-share-dir/site/resources
    $ zef --help
    ...
    CONFIGURATION /home/user/raku/install/share/perl6/site/resources/EE5DBAABF07682ECBE72BEE98E6B95E5D08675DE.json
    ...
=end code
=begin para
This config is loaded, but it is not yet the chosen config! We check that temporary config's C<%config<RootDir>> for valid json in a file named C<config.json> (i.e. C<%config<RootDir>/config.json> ). This can be confusing (so it may go away or be refined - PRs welcome) but for most cases it just means C<$*HOME/.zef/config.json> will override an installed zef configuration file.
=end para

=begin para
To summarize:
=end para

=item1 You can edit the C<resources/config.json> file before you install zef.
=begin code
When you `raku -I. bin/zef install .` that configuration file be be used to install zef and will also be installed with zef such that it will be the default.
=end code
=item1 You can create a C<%config<RootDir>/config.json> file.
=begin code
Where `%config<RootDir>`
comes from the previously mentioned `%?RESOURCES<config.json>`'s `RootDir` field (`$*HOME/.zef` in most cases), to allow overriding zef config behavior on a per user basis (allows setting different `--install-to` targets for, say, a root user and a regular user). Since this new config file could have a different `RootDir` than the default config (used to find the new one in the first place) this behavior may be changed in the future to be less confusing.
=end code
=item1 You can override both of the previous entries by passing `zef --config-path="$path" <any command>`

=begin head3
Configuration fields
=end head3

=begin head4
Basic Settings
=end head4

=item1 B<RootDir> - Where zef will look for a custom config.json file
=item1 B<TempDir> - A staging area for items that have been fetched and need to be extracted/moved
=item1 B<StoreDir> - Where zef caches distributions, package lists, etc after they've been fetched and extracted
=item1 B<DefaultCUR> - This sets the default value for C<--install-to="..."> . The default value of C<auto> means it will first try installing to rakudo's installation prefix, and if its not writable by the current user it will install to C<$*HOME/.raku> . These directories are not chosen by zef - they are actually represented by the magic strings C<site> and C<home> (which, like C<auto> , are valid values despite not being paths along with C<vendor> and C<perl> )

=begin head4
Phases / Plugins Settings
=end head4

=begin para
These consist of an array of hashes that describe how to instantiate some class that fulfills the appropriate interface from I<Zef.pm> (`Repository` C<Fetcher> C<Extractor> C<Builder> C<Tester> )
=end para

=begin para
The descriptions follow this format:
=end para
=begin code
{
    "short-name" : "p6c",
    "enabled" : 1,
    "module" : "Zef::Repository::Ecosystems",
    "options" : { }
}
=end code
=begin para
and are instantiated via
=end para
=begin code
::($hash<module>).new(|($hash<options>)
=end code
=item1 B<short-name> - This adds an enable and disable flag by the same name to the CLI (e.g. C<--p6c> and C<--/p6c> ) and is used when referencing which object took some action.
=item1 B<enabled> - Set to 0 to skip over the object during consideration (it will never be loaded). If omitted or if the value is non 0 then it will be enabled for use.
=item1 B<module> - The name of the class to instantiate. While it doesn't technically have to be a module it I<does> need to be a known namespace to C<require> .
=item1 B<options> - These are passed to the objects C<new> method and may not be consistent between modules as they are free to implement their own requirements.

=begin para
See the configuration file in L<resources/config.json|https://github.com/ugexe/zef/blob/master/resources/config.json> for a
little more information on how plugins are invoked.
=end para

=begin para
You can see debug output related to chosing and loading plugins by setting the env variable B<ZEF\_PLUGIN\_DEBUG=1>
=end para

=begin head1
FAQ
=end head1

=begin head3
Proxy support?
=end head3

=begin para
All the default fetching plugins have proxy support, but you'll need to refer to the backend program's
(wget, curl, git, etc) docs. You may need to set an I<ENV> variable, or you may need to add a command line
option for that specific plugin in I<resources/config.json>
=end para

=begin head3
Custom installation locations?
=end head3

=begin para
Pass a path to the I<-to> / I<--install-to> option and prefix the path with C<inst#> (unless you know what you're doing)
=end para
=begin code
$ zef -to="inst#/home/raku/custom" install Text::Table::Simple
===> Searching for: Text::Table::Simple
===> Testing: Text::Table::Simple:ver<0.0.3>:auth<github:ugexe>
===> Testing [OK] for Text::Table::Simple:ver<0.0.3>:auth<github:ugexe>
===> Installing: Text::Table::Simple:ver<0.0.3>:auth<github:ugexe>
=end code
=begin para
To make the custom location discoverable:
=end para
=begin code
# Set the RAKULIB env:
$ RAKULIB="inst#/home/raku/custom" raku -e "use Text::Table::Simple; say 'ok'"
ok
=end code
=para
    # or simply include it as needed

    $ raku -Iinst#/home/raku/custom -e "use Text::Table::Simple; say 'ok'"

    ok

=end pod
